version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: inference-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: inference-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: inference-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: inference-api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      CELERY_BROKER_URL: amqp://admin:admin123@rabbitmq:5672//
      REDIS_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      USE_LOCAL_STORAGE: "false"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker-gpu-0:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: inference-worker-0
    env_file:
      - .env
    environment:
      CELERY_BROKER_URL: amqp://admin:admin123@rabbitmq:5672//
      REDIS_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      USE_LOCAL_STORAGE: "false"
      CUDA_VISIBLE_DEVICES: "0"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./data:/app/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  worker-gpu-1:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: inference-worker-1
    env_file:
      - .env
    environment:
      CELERY_BROKER_URL: amqp://admin:admin123@rabbitmq:5672//
      REDIS_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      USE_LOCAL_STORAGE: "false"
      CUDA_VISIBLE_DEVICES: "1"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./data:/app/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  flower:
    image: mher/flower:2.0
    container_name: inference-flower
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: amqp://admin:admin123@rabbitmq:5672//
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      FLOWER_PORT: 5555
    depends_on:
      - rabbitmq
      - redis
    command: celery flower --broker=amqp://admin:admin123@rabbitmq:5672// --port=5555

  prometheus:
    image: prom/prometheus:latest
    container_name: inference-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    container_name: inference-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

volumes:
  rabbitmq_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data: